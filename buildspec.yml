version: 0.2

env:
  variables:
    # This S3 bucket will be used to store the packaged Lambda deployment bundle.
    # Make sure to provide a valid S3 bucket name (it must exist already).
    # The AWS CodeBuild IAM role must allow write access to it.
    S3_BUCKET: "lambda-deployment-artifacts-fw-golang-cicd"
    #PACKAGE: "github.com/XiaoYangZhu/lambda-go-samples"
    SRC_DIR: /usr/src

phases:

  install:
    runtime-versions:
      golang: 1.13

    commands:

      # AWS Codebuild Go images use /go for the $GOPATH so let's copy our 
      # application source code into that directory structure.
      #- mkdir -p "/go/src/$(dirname ${PACKAGE})"
      #- ln -s "${CODEBUILD_SRC_DIR}" "/go/src/${PACKAGE}"
      #- ls -al ${CODEBUILD_SRC_DIR}
      #- ln -s ${CODEBUILD_SRC_DIR} ${SRC_DIR}
      #- cp -r ${CODEBUILD_SRC_DIR}/* ${SRC_DIR}
      #- cd ${SRC_DIR}
      #- export GOPATH=$GOPATH:${CODEBUILD_SRC_DIR}
      - go env GOPATH
      - cd ${CODEBUILD_SRC_DIR}
      - pwd
      - ls -al
       
      # Print all environment variables (handy for AWS CodeBuild logs)
      - env

      # Install golint
      - go get -u golang.org/x/lint/golint

  pre_build: 
    commands:

      # Make sure we're in the project directory within our GOPATH
      #- cd "/go/src/${PACKAGE}"

      # Fetch all dependencies
      - export GOBIN=$GOPATH/bin
      - export PATH=$PATH:$GOBIN
      - go get -t ./...
      #- go get "github.com/aws/aws-lambda-go/lambda"
      #- go get "github.com/aws/aws-lambda-go/events"
      #- go get "github.com/XiaoYangZhu/lambda-go-samples"
      #- go get "github.com/stretchr/testify/assert"

      # Ensure code passes all lint tests
      - golint -set_exit_status

      # Check the Go code for common problems with 'go vet'
      - go vet .

      # Run all tests included with our application
      - go test .

  build:
    commands:

      # Build our go application
      - go build -o main

      # Package our application with AWS SAM
      - aws cloudformation package --template-file template.yml --s3-bucket ${S3_BUCKET} --output-template-file packaged.yml

artifacts:
  files:
    - packaged.yml
